Chapter 4: Greedy Algorithms
Algorithm Design by Jon Kleinberg and Eva Tardos
http://www.cs.princeton.edu/~wayne/kleinberg-tardos/04greedy-2x2.pdf


Interval Scheduling

Def: Two jobs compatible if they don't overlap.

Goal: Find maximum subset of mutally compatible jobs.

Note: This Does Not Work Since Weight Are Note 1
Greedy template: Consider jobs in some natural order.

Greedy Algorithm: Consider jobs in increasing order of finish time.
Take each job provided it's compatible with the ones already taken.

Algorithm:

Sort jobs by finish times so that f1 < f2 < ... < fn

A : Set of Jobs Selected
for j = 1 to n {
    if (job j compatitble with A)
       A <- A U {j}
}

return A




6.1 Weighted Interval Scheduling

http://www.cs.princeton.edu/courses/archive/spr05/cos423/lectures/06dynamic-programming.pdf

Weighted Interval Scheduling: Memorization
See Algorithm.

CS787: Advanced Algorithms
Lecture 3: Dynamic Programming

http://pages.cs.wisc.edu/~shuchi/courses/787-F09/scribe-notes/lec3.pdf

Dynamic programs overcome this issue by storing the answer to any subproblem
they solve, and reusing it if that subproblem needs to be solved again in the 
course of the algorithm.

The crucial observation is that there are only a polynomial number of different
subproblems that ever need to be solved. 

IBM: Dynamic Programming and Sequence Alignment 
http://www.ibm.com/developerworks/java/library/j-seqalign/index.html

Dynamic programming is an algorithmic technique used commonly in sequence analysis.
Dynamic programming is used when recursion could be used but would be inefficient because it would
repeatedly solve the same subproblems. 
